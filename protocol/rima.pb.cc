// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rima.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rima.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace hebi {
namespace rima {
namespace proto {
class ImageGridSpecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageGridSpec> {
} _ImageGridSpec_default_instance_;
class AdaptiveSurfaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdaptiveSurface> {
} _AdaptiveSurface_default_instance_;
class SharedImageResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SharedImageResult> {
} _SharedImageResult_default_instance_;
class ExplorerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExplorerResponse> {
} _ExplorerResponse_default_instance_;
class ExplorerRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExplorerRequest> {
} _ExplorerRequest_default_instance_;

namespace protobuf_rima_2eproto {


void TableStruct::Shutdown() {
  _ImageGridSpec_default_instance_.Shutdown();
  _AdaptiveSurface_default_instance_.Shutdown();
  _SharedImageResult_default_instance_.Shutdown();
  _ExplorerResponse_default_instance_.Shutdown();
  _ExplorerRequest_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ImageGridSpec_default_instance_.DefaultConstruct();
  _AdaptiveSurface_default_instance_.DefaultConstruct();
  _SharedImageResult_default_instance_.DefaultConstruct();
  _ExplorerResponse_default_instance_.DefaultConstruct();
  _ExplorerRequest_default_instance_.DefaultConstruct();
  _SharedImageResult_default_instance_.get_mutable()->image_grid_spec_ = const_cast< ::hebi::rima::proto::ImageGridSpec*>(
      ::hebi::rima::proto::ImageGridSpec::internal_default_instance());
  _SharedImageResult_default_instance_.get_mutable()->adaptive_surface_ = const_cast< ::hebi::rima::proto::AdaptiveSurface*>(
      ::hebi::rima::proto::AdaptiveSurface::internal_default_instance());
  _ExplorerResponse_default_instance_.get_mutable()->image_result_ = const_cast< ::hebi::rima::proto::SharedImageResult*>(
      ::hebi::rima::proto::SharedImageResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_rima_2eproto


// ===================================================================

static ::std::string* MutableUnknownFieldsForImageGridSpec(
    ImageGridSpec* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageGridSpec::kNumXFieldNumber;
const int ImageGridSpec::kNumZFieldNumber;
const int ImageGridSpec::kStartXFieldNumber;
const int ImageGridSpec::kStartZFieldNumber;
const int ImageGridSpec::kStepXFieldNumber;
const int ImageGridSpec::kStepZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageGridSpec::ImageGridSpec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rima_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hebi.rima.proto.ImageGridSpec)
}
ImageGridSpec::ImageGridSpec(const ImageGridSpec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_x_, &from.num_x_,
    reinterpret_cast<char*>(&step_z_) -
    reinterpret_cast<char*>(&num_x_) + sizeof(step_z_));
  // @@protoc_insertion_point(copy_constructor:hebi.rima.proto.ImageGridSpec)
}

void ImageGridSpec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_x_, 0, reinterpret_cast<char*>(&step_z_) -
    reinterpret_cast<char*>(&num_x_) + sizeof(step_z_));
}

ImageGridSpec::~ImageGridSpec() {
  // @@protoc_insertion_point(destructor:hebi.rima.proto.ImageGridSpec)
  SharedDtor();
}

void ImageGridSpec::SharedDtor() {
}

void ImageGridSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageGridSpec& ImageGridSpec::default_instance() {
  protobuf_rima_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageGridSpec* ImageGridSpec::New(::google::protobuf::Arena* arena) const {
  ImageGridSpec* n = new ImageGridSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageGridSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:hebi.rima.proto.ImageGridSpec)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&num_x_, 0, reinterpret_cast<char*>(&step_z_) -
      reinterpret_cast<char*>(&num_x_) + sizeof(step_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageGridSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForImageGridSpec, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:hebi.rima.proto.ImageGridSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_x = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 num_z = 2;
      case 2: {
        if (tag == 16u) {
          set_has_num_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float start_x = 3;
      case 3: {
        if (tag == 29u) {
          set_has_start_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float start_z = 4;
      case 4: {
        if (tag == 37u) {
          set_has_start_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float step_x = 5;
      case 5: {
        if (tag == 45u) {
          set_has_step_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float step_z = 6;
      case 6: {
        if (tag == 53u) {
          set_has_step_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hebi.rima.proto.ImageGridSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hebi.rima.proto.ImageGridSpec)
  return false;
#undef DO_
}

void ImageGridSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hebi.rima.proto.ImageGridSpec)
  // required uint32 num_x = 1;
  if (has_num_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_x(), output);
  }

  // required uint32 num_z = 2;
  if (has_num_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_z(), output);
  }

  // required float start_x = 3;
  if (has_start_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start_x(), output);
  }

  // required float start_z = 4;
  if (has_start_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_z(), output);
  }

  // required float step_x = 5;
  if (has_step_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->step_x(), output);
  }

  // required float step_z = 6;
  if (has_step_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->step_z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:hebi.rima.proto.ImageGridSpec)
}

size_t ImageGridSpec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hebi.rima.proto.ImageGridSpec)
  size_t total_size = 0;

  if (has_num_x()) {
    // required uint32 num_x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_x());
  }

  if (has_num_z()) {
    // required uint32 num_z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_z());
  }

  if (has_start_x()) {
    // required float start_x = 3;
    total_size += 1 + 4;
  }

  if (has_start_z()) {
    // required float start_z = 4;
    total_size += 1 + 4;
  }

  if (has_step_x()) {
    // required float step_x = 5;
    total_size += 1 + 4;
  }

  if (has_step_z()) {
    // required float step_z = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ImageGridSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hebi.rima.proto.ImageGridSpec)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 num_x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_x());

    // required uint32 num_z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_z());

    // required float start_x = 3;
    total_size += 1 + 4;

    // required float start_z = 4;
    total_size += 1 + 4;

    // required float step_x = 5;
    total_size += 1 + 4;

    // required float step_z = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageGridSpec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageGridSpec*>(&from));
}

void ImageGridSpec::MergeFrom(const ImageGridSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hebi.rima.proto.ImageGridSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_num_x()) {
      set_num_x(from.num_x());
    }
    if (from.has_num_z()) {
      set_num_z(from.num_z());
    }
    if (from.has_start_x()) {
      set_start_x(from.start_x());
    }
    if (from.has_start_z()) {
      set_start_z(from.start_z());
    }
    if (from.has_step_x()) {
      set_step_x(from.step_x());
    }
    if (from.has_step_z()) {
      set_step_z(from.step_z());
    }
  }
}

void ImageGridSpec::CopyFrom(const ImageGridSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hebi.rima.proto.ImageGridSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageGridSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ImageGridSpec::Swap(ImageGridSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageGridSpec::InternalSwap(ImageGridSpec* other) {
  std::swap(num_x_, other->num_x_);
  std::swap(num_z_, other->num_z_);
  std::swap(start_x_, other->start_x_);
  std::swap(start_z_, other->start_z_);
  std::swap(step_x_, other->step_x_);
  std::swap(step_z_, other->step_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageGridSpec::GetTypeName() const {
  return "hebi.rima.proto.ImageGridSpec";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageGridSpec

// required uint32 num_x = 1;
bool ImageGridSpec::has_num_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageGridSpec::set_has_num_x() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageGridSpec::clear_has_num_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageGridSpec::clear_num_x() {
  num_x_ = 0u;
  clear_has_num_x();
}
::google::protobuf::uint32 ImageGridSpec::num_x() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.ImageGridSpec.num_x)
  return num_x_;
}
void ImageGridSpec::set_num_x(::google::protobuf::uint32 value) {
  set_has_num_x();
  num_x_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.ImageGridSpec.num_x)
}

// required uint32 num_z = 2;
bool ImageGridSpec::has_num_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageGridSpec::set_has_num_z() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageGridSpec::clear_has_num_z() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageGridSpec::clear_num_z() {
  num_z_ = 0u;
  clear_has_num_z();
}
::google::protobuf::uint32 ImageGridSpec::num_z() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.ImageGridSpec.num_z)
  return num_z_;
}
void ImageGridSpec::set_num_z(::google::protobuf::uint32 value) {
  set_has_num_z();
  num_z_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.ImageGridSpec.num_z)
}

// required float start_x = 3;
bool ImageGridSpec::has_start_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageGridSpec::set_has_start_x() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageGridSpec::clear_has_start_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageGridSpec::clear_start_x() {
  start_x_ = 0;
  clear_has_start_x();
}
float ImageGridSpec::start_x() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.ImageGridSpec.start_x)
  return start_x_;
}
void ImageGridSpec::set_start_x(float value) {
  set_has_start_x();
  start_x_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.ImageGridSpec.start_x)
}

// required float start_z = 4;
bool ImageGridSpec::has_start_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageGridSpec::set_has_start_z() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageGridSpec::clear_has_start_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageGridSpec::clear_start_z() {
  start_z_ = 0;
  clear_has_start_z();
}
float ImageGridSpec::start_z() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.ImageGridSpec.start_z)
  return start_z_;
}
void ImageGridSpec::set_start_z(float value) {
  set_has_start_z();
  start_z_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.ImageGridSpec.start_z)
}

// required float step_x = 5;
bool ImageGridSpec::has_step_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageGridSpec::set_has_step_x() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageGridSpec::clear_has_step_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageGridSpec::clear_step_x() {
  step_x_ = 0;
  clear_has_step_x();
}
float ImageGridSpec::step_x() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.ImageGridSpec.step_x)
  return step_x_;
}
void ImageGridSpec::set_step_x(float value) {
  set_has_step_x();
  step_x_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.ImageGridSpec.step_x)
}

// required float step_z = 6;
bool ImageGridSpec::has_step_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageGridSpec::set_has_step_z() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageGridSpec::clear_has_step_z() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageGridSpec::clear_step_z() {
  step_z_ = 0;
  clear_has_step_z();
}
float ImageGridSpec::step_z() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.ImageGridSpec.step_z)
  return step_z_;
}
void ImageGridSpec::set_step_z(float value) {
  set_has_step_z();
  step_z_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.ImageGridSpec.step_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAdaptiveSurface(
    AdaptiveSurface* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaptiveSurface::kX0OutFieldNumber;
const int AdaptiveSurface::kDXOutFieldNumber;
const int AdaptiveSurface::kSurfacePointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaptiveSurface::AdaptiveSurface()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rima_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hebi.rima.proto.AdaptiveSurface)
}
AdaptiveSurface::AdaptiveSurface(const AdaptiveSurface& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      surface_points_(from.surface_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x0_out_, &from.x0_out_,
    reinterpret_cast<char*>(&dx_out_) -
    reinterpret_cast<char*>(&x0_out_) + sizeof(dx_out_));
  // @@protoc_insertion_point(copy_constructor:hebi.rima.proto.AdaptiveSurface)
}

void AdaptiveSurface::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x0_out_, 0, reinterpret_cast<char*>(&dx_out_) -
    reinterpret_cast<char*>(&x0_out_) + sizeof(dx_out_));
}

AdaptiveSurface::~AdaptiveSurface() {
  // @@protoc_insertion_point(destructor:hebi.rima.proto.AdaptiveSurface)
  SharedDtor();
}

void AdaptiveSurface::SharedDtor() {
}

void AdaptiveSurface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdaptiveSurface& AdaptiveSurface::default_instance() {
  protobuf_rima_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdaptiveSurface* AdaptiveSurface::New(::google::protobuf::Arena* arena) const {
  AdaptiveSurface* n = new AdaptiveSurface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaptiveSurface::Clear() {
// @@protoc_insertion_point(message_clear_start:hebi.rima.proto.AdaptiveSurface)
  surface_points_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x0_out_, 0, reinterpret_cast<char*>(&dx_out_) -
      reinterpret_cast<char*>(&x0_out_) + sizeof(dx_out_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AdaptiveSurface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForAdaptiveSurface, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:hebi.rima.proto.AdaptiveSurface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X0_out = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x0_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x0_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float DX_out = 2;
      case 2: {
        if (tag == 21u) {
          set_has_dx_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dx_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float surface_points = 3 [packed = true];
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_surface_points())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_surface_points())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hebi.rima.proto.AdaptiveSurface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hebi.rima.proto.AdaptiveSurface)
  return false;
#undef DO_
}

void AdaptiveSurface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hebi.rima.proto.AdaptiveSurface)
  // required float X0_out = 1;
  if (has_x0_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x0_out(), output);
  }

  // required float DX_out = 2;
  if (has_dx_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dx_out(), output);
  }

  // repeated float surface_points = 3 [packed = true];
  if (this->surface_points_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_surface_points_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->surface_points().data(), this->surface_points_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:hebi.rima.proto.AdaptiveSurface)
}

size_t AdaptiveSurface::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hebi.rima.proto.AdaptiveSurface)
  size_t total_size = 0;

  if (has_x0_out()) {
    // required float X0_out = 1;
    total_size += 1 + 4;
  }

  if (has_dx_out()) {
    // required float DX_out = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AdaptiveSurface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hebi.rima.proto.AdaptiveSurface)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float X0_out = 1;
    total_size += 1 + 4;

    // required float DX_out = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float surface_points = 3 [packed = true];
  {
    unsigned int count = this->surface_points_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _surface_points_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaptiveSurface::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdaptiveSurface*>(&from));
}

void AdaptiveSurface::MergeFrom(const AdaptiveSurface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hebi.rima.proto.AdaptiveSurface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  surface_points_.MergeFrom(from.surface_points_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_x0_out()) {
      set_x0_out(from.x0_out());
    }
    if (from.has_dx_out()) {
      set_dx_out(from.dx_out());
    }
  }
}

void AdaptiveSurface::CopyFrom(const AdaptiveSurface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hebi.rima.proto.AdaptiveSurface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveSurface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AdaptiveSurface::Swap(AdaptiveSurface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaptiveSurface::InternalSwap(AdaptiveSurface* other) {
  surface_points_.UnsafeArenaSwap(&other->surface_points_);
  std::swap(x0_out_, other->x0_out_);
  std::swap(dx_out_, other->dx_out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AdaptiveSurface::GetTypeName() const {
  return "hebi.rima.proto.AdaptiveSurface";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaptiveSurface

// required float X0_out = 1;
bool AdaptiveSurface::has_x0_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdaptiveSurface::set_has_x0_out() {
  _has_bits_[0] |= 0x00000001u;
}
void AdaptiveSurface::clear_has_x0_out() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdaptiveSurface::clear_x0_out() {
  x0_out_ = 0;
  clear_has_x0_out();
}
float AdaptiveSurface::x0_out() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.AdaptiveSurface.X0_out)
  return x0_out_;
}
void AdaptiveSurface::set_x0_out(float value) {
  set_has_x0_out();
  x0_out_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.AdaptiveSurface.X0_out)
}

// required float DX_out = 2;
bool AdaptiveSurface::has_dx_out() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdaptiveSurface::set_has_dx_out() {
  _has_bits_[0] |= 0x00000002u;
}
void AdaptiveSurface::clear_has_dx_out() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdaptiveSurface::clear_dx_out() {
  dx_out_ = 0;
  clear_has_dx_out();
}
float AdaptiveSurface::dx_out() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.AdaptiveSurface.DX_out)
  return dx_out_;
}
void AdaptiveSurface::set_dx_out(float value) {
  set_has_dx_out();
  dx_out_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.AdaptiveSurface.DX_out)
}

// repeated float surface_points = 3 [packed = true];
int AdaptiveSurface::surface_points_size() const {
  return surface_points_.size();
}
void AdaptiveSurface::clear_surface_points() {
  surface_points_.Clear();
}
float AdaptiveSurface::surface_points(int index) const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.AdaptiveSurface.surface_points)
  return surface_points_.Get(index);
}
void AdaptiveSurface::set_surface_points(int index, float value) {
  surface_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:hebi.rima.proto.AdaptiveSurface.surface_points)
}
void AdaptiveSurface::add_surface_points(float value) {
  surface_points_.Add(value);
  // @@protoc_insertion_point(field_add:hebi.rima.proto.AdaptiveSurface.surface_points)
}
const ::google::protobuf::RepeatedField< float >&
AdaptiveSurface::surface_points() const {
  // @@protoc_insertion_point(field_list:hebi.rima.proto.AdaptiveSurface.surface_points)
  return surface_points_;
}
::google::protobuf::RepeatedField< float >*
AdaptiveSurface::mutable_surface_points() {
  // @@protoc_insertion_point(field_mutable_list:hebi.rima.proto.AdaptiveSurface.surface_points)
  return &surface_points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSharedImageResult(
    SharedImageResult* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedImageResult::kSequenceIdFieldNumber;
const int SharedImageResult::kEncoder1CountFieldNumber;
const int SharedImageResult::kEncoder2CountFieldNumber;
const int SharedImageResult::kImageDataFieldNumber;
const int SharedImageResult::kImageGridSpecFieldNumber;
const int SharedImageResult::kAdaptiveSurfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedImageResult::SharedImageResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rima_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hebi.rima.proto.SharedImageResult)
}
SharedImageResult::SharedImageResult(const SharedImageResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      image_data_(from.image_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_grid_spec()) {
    image_grid_spec_ = new ::hebi::rima::proto::ImageGridSpec(*from.image_grid_spec_);
  } else {
    image_grid_spec_ = NULL;
  }
  if (from.has_adaptive_surface()) {
    adaptive_surface_ = new ::hebi::rima::proto::AdaptiveSurface(*from.adaptive_surface_);
  } else {
    adaptive_surface_ = NULL;
  }
  ::memcpy(&sequence_id_, &from.sequence_id_,
    reinterpret_cast<char*>(&encoder2_count_) -
    reinterpret_cast<char*>(&sequence_id_) + sizeof(encoder2_count_));
  // @@protoc_insertion_point(copy_constructor:hebi.rima.proto.SharedImageResult)
}

void SharedImageResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&image_grid_spec_, 0, reinterpret_cast<char*>(&encoder2_count_) -
    reinterpret_cast<char*>(&image_grid_spec_) + sizeof(encoder2_count_));
}

SharedImageResult::~SharedImageResult() {
  // @@protoc_insertion_point(destructor:hebi.rima.proto.SharedImageResult)
  SharedDtor();
}

void SharedImageResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete image_grid_spec_;
  }
  if (this != internal_default_instance()) {
    delete adaptive_surface_;
  }
}

void SharedImageResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedImageResult& SharedImageResult::default_instance() {
  protobuf_rima_2eproto::InitDefaults();
  return *internal_default_instance();
}

SharedImageResult* SharedImageResult::New(::google::protobuf::Arena* arena) const {
  SharedImageResult* n = new SharedImageResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedImageResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hebi.rima.proto.SharedImageResult)
  image_data_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_image_grid_spec()) {
      GOOGLE_DCHECK(image_grid_spec_ != NULL);
      image_grid_spec_->::hebi::rima::proto::ImageGridSpec::Clear();
    }
    if (has_adaptive_surface()) {
      GOOGLE_DCHECK(adaptive_surface_ != NULL);
      adaptive_surface_->::hebi::rima::proto::AdaptiveSurface::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&sequence_id_, 0, reinterpret_cast<char*>(&encoder2_count_) -
      reinterpret_cast<char*>(&sequence_id_) + sizeof(encoder2_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SharedImageResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForSharedImageResult, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:hebi.rima.proto.SharedImageResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 encoder1_count = 2;
      case 2: {
        if (tag == 16u) {
          set_has_encoder1_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encoder1_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 encoder2_count = 3;
      case 3: {
        if (tag == 24u) {
          set_has_encoder2_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encoder2_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float image_data = 8 [packed = true];
      case 8: {
        if (tag == 66u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_image_data())));
        } else if (tag == 69u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_image_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hebi.rima.proto.ImageGridSpec image_grid_spec = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_grid_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hebi.rima.proto.AdaptiveSurface adaptive_surface = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adaptive_surface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hebi.rima.proto.SharedImageResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hebi.rima.proto.SharedImageResult)
  return false;
#undef DO_
}

void SharedImageResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hebi.rima.proto.SharedImageResult)
  // required uint64 sequence_id = 1;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_id(), output);
  }

  // optional uint64 encoder1_count = 2;
  if (has_encoder1_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->encoder1_count(), output);
  }

  // optional uint64 encoder2_count = 3;
  if (has_encoder2_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->encoder2_count(), output);
  }

  // repeated float image_data = 8 [packed = true];
  if (this->image_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_image_data_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->image_data().data(), this->image_data_size(), output);
  }

  // required .hebi.rima.proto.ImageGridSpec image_grid_spec = 10;
  if (has_image_grid_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->image_grid_spec_, output);
  }

  // optional .hebi.rima.proto.AdaptiveSurface adaptive_surface = 11;
  if (has_adaptive_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->adaptive_surface_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:hebi.rima.proto.SharedImageResult)
}

size_t SharedImageResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hebi.rima.proto.SharedImageResult)
  size_t total_size = 0;

  if (has_image_grid_spec()) {
    // required .hebi.rima.proto.ImageGridSpec image_grid_spec = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_grid_spec_);
  }

  if (has_sequence_id()) {
    // required uint64 sequence_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_id());
  }

  return total_size;
}
size_t SharedImageResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hebi.rima.proto.SharedImageResult)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .hebi.rima.proto.ImageGridSpec image_grid_spec = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_grid_spec_);

    // required uint64 sequence_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float image_data = 8 [packed = true];
  {
    unsigned int count = this->image_data_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional .hebi.rima.proto.AdaptiveSurface adaptive_surface = 11;
  if (has_adaptive_surface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adaptive_surface_);
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional uint64 encoder1_count = 2;
    if (has_encoder1_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encoder1_count());
    }

    // optional uint64 encoder2_count = 3;
    if (has_encoder2_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->encoder2_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedImageResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedImageResult*>(&from));
}

void SharedImageResult::MergeFrom(const SharedImageResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hebi.rima.proto.SharedImageResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_data_.MergeFrom(from.image_data_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_image_grid_spec()) {
      mutable_image_grid_spec()->::hebi::rima::proto::ImageGridSpec::MergeFrom(from.image_grid_spec());
    }
    if (from.has_adaptive_surface()) {
      mutable_adaptive_surface()->::hebi::rima::proto::AdaptiveSurface::MergeFrom(from.adaptive_surface());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_encoder1_count()) {
      set_encoder1_count(from.encoder1_count());
    }
    if (from.has_encoder2_count()) {
      set_encoder2_count(from.encoder2_count());
    }
  }
}

void SharedImageResult::CopyFrom(const SharedImageResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hebi.rima.proto.SharedImageResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedImageResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (has_image_grid_spec()) {
    if (!this->image_grid_spec_->IsInitialized()) return false;
  }
  if (has_adaptive_surface()) {
    if (!this->adaptive_surface_->IsInitialized()) return false;
  }
  return true;
}

void SharedImageResult::Swap(SharedImageResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedImageResult::InternalSwap(SharedImageResult* other) {
  image_data_.UnsafeArenaSwap(&other->image_data_);
  std::swap(image_grid_spec_, other->image_grid_spec_);
  std::swap(adaptive_surface_, other->adaptive_surface_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(encoder1_count_, other->encoder1_count_);
  std::swap(encoder2_count_, other->encoder2_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SharedImageResult::GetTypeName() const {
  return "hebi.rima.proto.SharedImageResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SharedImageResult

// required uint64 sequence_id = 1;
bool SharedImageResult::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SharedImageResult::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SharedImageResult::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SharedImageResult::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_id();
}
::google::protobuf::uint64 SharedImageResult::sequence_id() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.SharedImageResult.sequence_id)
  return sequence_id_;
}
void SharedImageResult::set_sequence_id(::google::protobuf::uint64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.SharedImageResult.sequence_id)
}

// optional uint64 encoder1_count = 2;
bool SharedImageResult::has_encoder1_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SharedImageResult::set_has_encoder1_count() {
  _has_bits_[0] |= 0x00000008u;
}
void SharedImageResult::clear_has_encoder1_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void SharedImageResult::clear_encoder1_count() {
  encoder1_count_ = GOOGLE_ULONGLONG(0);
  clear_has_encoder1_count();
}
::google::protobuf::uint64 SharedImageResult::encoder1_count() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.SharedImageResult.encoder1_count)
  return encoder1_count_;
}
void SharedImageResult::set_encoder1_count(::google::protobuf::uint64 value) {
  set_has_encoder1_count();
  encoder1_count_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.SharedImageResult.encoder1_count)
}

// optional uint64 encoder2_count = 3;
bool SharedImageResult::has_encoder2_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SharedImageResult::set_has_encoder2_count() {
  _has_bits_[0] |= 0x00000010u;
}
void SharedImageResult::clear_has_encoder2_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void SharedImageResult::clear_encoder2_count() {
  encoder2_count_ = GOOGLE_ULONGLONG(0);
  clear_has_encoder2_count();
}
::google::protobuf::uint64 SharedImageResult::encoder2_count() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.SharedImageResult.encoder2_count)
  return encoder2_count_;
}
void SharedImageResult::set_encoder2_count(::google::protobuf::uint64 value) {
  set_has_encoder2_count();
  encoder2_count_ = value;
  // @@protoc_insertion_point(field_set:hebi.rima.proto.SharedImageResult.encoder2_count)
}

// repeated float image_data = 8 [packed = true];
int SharedImageResult::image_data_size() const {
  return image_data_.size();
}
void SharedImageResult::clear_image_data() {
  image_data_.Clear();
}
float SharedImageResult::image_data(int index) const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.SharedImageResult.image_data)
  return image_data_.Get(index);
}
void SharedImageResult::set_image_data(int index, float value) {
  image_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:hebi.rima.proto.SharedImageResult.image_data)
}
void SharedImageResult::add_image_data(float value) {
  image_data_.Add(value);
  // @@protoc_insertion_point(field_add:hebi.rima.proto.SharedImageResult.image_data)
}
const ::google::protobuf::RepeatedField< float >&
SharedImageResult::image_data() const {
  // @@protoc_insertion_point(field_list:hebi.rima.proto.SharedImageResult.image_data)
  return image_data_;
}
::google::protobuf::RepeatedField< float >*
SharedImageResult::mutable_image_data() {
  // @@protoc_insertion_point(field_mutable_list:hebi.rima.proto.SharedImageResult.image_data)
  return &image_data_;
}

// required .hebi.rima.proto.ImageGridSpec image_grid_spec = 10;
bool SharedImageResult::has_image_grid_spec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SharedImageResult::set_has_image_grid_spec() {
  _has_bits_[0] |= 0x00000001u;
}
void SharedImageResult::clear_has_image_grid_spec() {
  _has_bits_[0] &= ~0x00000001u;
}
void SharedImageResult::clear_image_grid_spec() {
  if (image_grid_spec_ != NULL) image_grid_spec_->::hebi::rima::proto::ImageGridSpec::Clear();
  clear_has_image_grid_spec();
}
const ::hebi::rima::proto::ImageGridSpec& SharedImageResult::image_grid_spec() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.SharedImageResult.image_grid_spec)
  return image_grid_spec_ != NULL ? *image_grid_spec_
                         : *::hebi::rima::proto::ImageGridSpec::internal_default_instance();
}
::hebi::rima::proto::ImageGridSpec* SharedImageResult::mutable_image_grid_spec() {
  set_has_image_grid_spec();
  if (image_grid_spec_ == NULL) {
    image_grid_spec_ = new ::hebi::rima::proto::ImageGridSpec;
  }
  // @@protoc_insertion_point(field_mutable:hebi.rima.proto.SharedImageResult.image_grid_spec)
  return image_grid_spec_;
}
::hebi::rima::proto::ImageGridSpec* SharedImageResult::release_image_grid_spec() {
  // @@protoc_insertion_point(field_release:hebi.rima.proto.SharedImageResult.image_grid_spec)
  clear_has_image_grid_spec();
  ::hebi::rima::proto::ImageGridSpec* temp = image_grid_spec_;
  image_grid_spec_ = NULL;
  return temp;
}
void SharedImageResult::set_allocated_image_grid_spec(::hebi::rima::proto::ImageGridSpec* image_grid_spec) {
  delete image_grid_spec_;
  image_grid_spec_ = image_grid_spec;
  if (image_grid_spec) {
    set_has_image_grid_spec();
  } else {
    clear_has_image_grid_spec();
  }
  // @@protoc_insertion_point(field_set_allocated:hebi.rima.proto.SharedImageResult.image_grid_spec)
}

// optional .hebi.rima.proto.AdaptiveSurface adaptive_surface = 11;
bool SharedImageResult::has_adaptive_surface() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SharedImageResult::set_has_adaptive_surface() {
  _has_bits_[0] |= 0x00000002u;
}
void SharedImageResult::clear_has_adaptive_surface() {
  _has_bits_[0] &= ~0x00000002u;
}
void SharedImageResult::clear_adaptive_surface() {
  if (adaptive_surface_ != NULL) adaptive_surface_->::hebi::rima::proto::AdaptiveSurface::Clear();
  clear_has_adaptive_surface();
}
const ::hebi::rima::proto::AdaptiveSurface& SharedImageResult::adaptive_surface() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.SharedImageResult.adaptive_surface)
  return adaptive_surface_ != NULL ? *adaptive_surface_
                         : *::hebi::rima::proto::AdaptiveSurface::internal_default_instance();
}
::hebi::rima::proto::AdaptiveSurface* SharedImageResult::mutable_adaptive_surface() {
  set_has_adaptive_surface();
  if (adaptive_surface_ == NULL) {
    adaptive_surface_ = new ::hebi::rima::proto::AdaptiveSurface;
  }
  // @@protoc_insertion_point(field_mutable:hebi.rima.proto.SharedImageResult.adaptive_surface)
  return adaptive_surface_;
}
::hebi::rima::proto::AdaptiveSurface* SharedImageResult::release_adaptive_surface() {
  // @@protoc_insertion_point(field_release:hebi.rima.proto.SharedImageResult.adaptive_surface)
  clear_has_adaptive_surface();
  ::hebi::rima::proto::AdaptiveSurface* temp = adaptive_surface_;
  adaptive_surface_ = NULL;
  return temp;
}
void SharedImageResult::set_allocated_adaptive_surface(::hebi::rima::proto::AdaptiveSurface* adaptive_surface) {
  delete adaptive_surface_;
  adaptive_surface_ = adaptive_surface;
  if (adaptive_surface) {
    set_has_adaptive_surface();
  } else {
    clear_has_adaptive_surface();
  }
  // @@protoc_insertion_point(field_set_allocated:hebi.rima.proto.SharedImageResult.adaptive_surface)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForExplorerResponse(
    ExplorerResponse* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplorerResponse::kImageResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplorerResponse::ExplorerResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rima_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hebi.rima.proto.ExplorerResponse)
}
ExplorerResponse::ExplorerResponse(const ExplorerResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_result()) {
    image_result_ = new ::hebi::rima::proto::SharedImageResult(*from.image_result_);
  } else {
    image_result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hebi.rima.proto.ExplorerResponse)
}

void ExplorerResponse::SharedCtor() {
  _cached_size_ = 0;
  image_result_ = NULL;
}

ExplorerResponse::~ExplorerResponse() {
  // @@protoc_insertion_point(destructor:hebi.rima.proto.ExplorerResponse)
  SharedDtor();
}

void ExplorerResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete image_result_;
  }
}

void ExplorerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExplorerResponse& ExplorerResponse::default_instance() {
  protobuf_rima_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExplorerResponse* ExplorerResponse::New(::google::protobuf::Arena* arena) const {
  ExplorerResponse* n = new ExplorerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExplorerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hebi.rima.proto.ExplorerResponse)
  if (has_image_result()) {
    GOOGLE_DCHECK(image_result_ != NULL);
    image_result_->::hebi::rima::proto::SharedImageResult::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExplorerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForExplorerResponse, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:hebi.rima.proto.ExplorerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hebi.rima.proto.SharedImageResult shared_image_result = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hebi.rima.proto.ExplorerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hebi.rima.proto.ExplorerResponse)
  return false;
#undef DO_
}

void ExplorerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hebi.rima.proto.ExplorerResponse)
  // optional .hebi.rima.proto.SharedImageResult shared_image_result = 1;
  if (has_image_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->image_result_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:hebi.rima.proto.ExplorerResponse)
}

size_t ExplorerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hebi.rima.proto.ExplorerResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .hebi.rima.proto.SharedImageResult shared_image_result = 1;
  if (has_image_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplorerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExplorerResponse*>(&from));
}

void ExplorerResponse::MergeFrom(const ExplorerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hebi.rima.proto.ExplorerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_result()) {
    mutable_image_result()->::hebi::rima::proto::SharedImageResult::MergeFrom(from.image_result());
  }
}

void ExplorerResponse::CopyFrom(const ExplorerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hebi.rima.proto.ExplorerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplorerResponse::IsInitialized() const {
  if (has_image_result()) {
    if (!this->image_result_->IsInitialized()) return false;
  }
  return true;
}

void ExplorerResponse::Swap(ExplorerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplorerResponse::InternalSwap(ExplorerResponse* other) {
  std::swap(image_result_, other->image_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExplorerResponse::GetTypeName() const {
  return "hebi.rima.proto.ExplorerResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExplorerResponse

// optional .hebi.rima.proto.SharedImageResult shared_image_result = 1;
bool ExplorerResponse::has_image_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExplorerResponse::set_has_image_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ExplorerResponse::clear_has_image_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExplorerResponse::clear_image_result() {
  if (image_result_ != NULL) image_result_->::hebi::rima::proto::SharedImageResult::Clear();
  clear_has_image_result();
}
const ::hebi::rima::proto::SharedImageResult& ExplorerResponse::shared_image_result() const {
  // @@protoc_insertion_point(field_get:hebi.rima.proto.ExplorerResponse.shared_image_result)
  return image_result_ != NULL ? *image_result_
                         : *::hebi::rima::proto::SharedImageResult::internal_default_instance();
}
::hebi::rima::proto::SharedImageResult* ExplorerResponse::mutable_image_result() {
  set_has_image_result();
  if (image_result_ == NULL) {
    image_result_ = new ::hebi::rima::proto::SharedImageResult;
  }
  // @@protoc_insertion_point(field_mutable:hebi.rima.proto.ExplorerResponse.shared_image_result)
  return image_result_;
}
::hebi::rima::proto::SharedImageResult* ExplorerResponse::release_image_result() {
  // @@protoc_insertion_point(field_release:hebi.rima.proto.ExplorerResponse.shared_image_result)
  clear_has_image_result();
  ::hebi::rima::proto::SharedImageResult* temp = image_result_;
  image_result_ = NULL;
  return temp;
}
void ExplorerResponse::set_allocated_image_result(::hebi::rima::proto::SharedImageResult* shared_image_result) {
  delete image_result_;
  image_result_ = shared_image_result;
  if (shared_image_result) {
    set_has_image_result();
  } else {
    clear_has_image_result();
  }
  // @@protoc_insertion_point(field_set_allocated:hebi.rima.proto.ExplorerResponse.shared_image_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForExplorerRequest(
    ExplorerRequest* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplorerRequest::ExplorerRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rima_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hebi.rima.proto.ExplorerRequest)
}
ExplorerRequest::ExplorerRequest(const ExplorerRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hebi.rima.proto.ExplorerRequest)
}

void ExplorerRequest::SharedCtor() {
  _cached_size_ = 0;
}

ExplorerRequest::~ExplorerRequest() {
  // @@protoc_insertion_point(destructor:hebi.rima.proto.ExplorerRequest)
  SharedDtor();
}

void ExplorerRequest::SharedDtor() {
}

void ExplorerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExplorerRequest& ExplorerRequest::default_instance() {
  protobuf_rima_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExplorerRequest* ExplorerRequest::New(::google::protobuf::Arena* arena) const {
  ExplorerRequest* n = new ExplorerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExplorerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hebi.rima.proto.ExplorerRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExplorerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForExplorerRequest, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:hebi.rima.proto.ExplorerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:hebi.rima.proto.ExplorerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hebi.rima.proto.ExplorerRequest)
  return false;
#undef DO_
}

void ExplorerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hebi.rima.proto.ExplorerRequest)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:hebi.rima.proto.ExplorerRequest)
}

size_t ExplorerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hebi.rima.proto.ExplorerRequest)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplorerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExplorerRequest*>(&from));
}

void ExplorerRequest::MergeFrom(const ExplorerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hebi.rima.proto.ExplorerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void ExplorerRequest::CopyFrom(const ExplorerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hebi.rima.proto.ExplorerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplorerRequest::IsInitialized() const {
  return true;
}

void ExplorerRequest::Swap(ExplorerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplorerRequest::InternalSwap(ExplorerRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExplorerRequest::GetTypeName() const {
  return "hebi.rima.proto.ExplorerRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExplorerRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rima
}  // namespace hebi

// @@protoc_insertion_point(global_scope)
